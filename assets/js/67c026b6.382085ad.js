"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[873],{4556:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return u},metadata:function(){return s},toc:function(){return l}});var r=n(5773),o=n(808),a=(n(7378),n(5318)),i=["components"],u={},c="debug",s={unversionedId:"debug/readme",id:"debug/readme",title:"debug",description:"Note: debug cannot be imported as import { debug } from 'patronum'",source:"@site/../src/debug/readme.md",sourceDirName:"debug",slug:"/debug/",permalink:"/methods/debug/",draft:!1,editUrl:"https://github.com/effector/patronum/tree/main/src/../src/debug/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"methodsSidebar",previous:{title:"debounce",permalink:"/methods/debounce/"},next:{title:"delay",permalink:"/methods/delay/"}},p={},l=[{value:"Motivation",id:"motivation",level:2},{value:"Example",id:"example",level:2},{value:"Traces",id:"traces",level:2}],d={toc:l};function m(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"debug"},"debug"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { debug } from 'patronum/debug';\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Note: debug cannot be imported as ",(0,a.kt)("inlineCode",{parentName:"p"},"import { debug } from 'patronum'"))),(0,a.kt)("p",null,"It is helpful to debug your application's logic."),(0,a.kt)("p",null,"Just pass any effector's unit to ",(0,a.kt)("inlineCode",{parentName:"p"},"debug"),"."),(0,a.kt)("h2",{id:"motivation"},"Motivation"),(0,a.kt)("p",null,"Sometimes during development, it is necessary to display the value of the stores and payload of events, each time you write ",(0,a.kt)("inlineCode",{parentName:"p"},"console.log")," inside ",(0,a.kt)("inlineCode",{parentName:"p"},".watch")," and copy/paste it is unpleasant. ",(0,a.kt)("inlineCode",{parentName:"p"},"debug")," allows you to speed up this process a lot by passing all the necessary units for a debugging into a method arguments."),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { createStore, createEvent, createEffect } from 'effector';\nimport { debug } from 'patronum/debug';\n\nconst event = createEvent();\nconst effect = createEffect().use((payload) => Promise.resolve('result' + payload));\nconst $store = createStore(0)\n  .on(event, (state, value) => state + value)\n  .on(effect.done, (state) => state * 10);\n\ndebug($store, event, effect);\n\nevent(5);\neffect('demo');\n\n// => [store] $store 1\n// => [event] event 5\n// => [store] $store 6\n// => [effect] effect demo\n// => [effect] effect.done {\"params\":\"demo\", \"result\": \"resultdemo\"}\n// => [store] $store 60\n")),(0,a.kt)("h2",{id:"traces"},"Traces"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"patronum/debug")," supports computation traces logging, if ",(0,a.kt)("inlineCode",{parentName:"p"},"{ trace: true }")," is set.\nIt is recommended to use this feature along with ",(0,a.kt)("inlineCode",{parentName:"p"},"effector/babel-plugin"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'const inputChanged = createEvent();\nconst $form = createStore(0).on(inputChanged, (s) => s + 1);\n\ndebug({ trace: true }, $form, submitFx);\n\ninputChanged();\n\n// "[store] $form 0",\n// "[store] $form 1",\n// "[store] $form trace",\n// "<- [store] $form 1",\n// "<- [$form.on] $form.on(inputChanged) 1",\n// "<- [event] inputChanged ",\n')))}m.isMDXComponent=!0},5318:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7378);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),d=s(n),m=o,f=d["".concat(c,".").concat(m)]||d[m]||l[m]||a;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var u={};for(var c in t)hasOwnProperty.call(t,c)&&(u[c]=t[c]);u.originalType=e,u.mdxType="string"==typeof e?e:o,i[1]=u;for(var s=2;s<a;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);